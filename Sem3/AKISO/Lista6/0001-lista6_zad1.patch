From 0419aa5612dd48ede018e90d26598d1764241cec Mon Sep 17 00:00:00 2001
Date: Sun, 12 Jan 2025 20:14:17 +0100
Subject: [PATCH] lista6_zad1

---
 Makefile |  1 +
 defs.h   |  1 +
 exec.c   |  6 ++++++
 proc.c   |  2 ++
 testvm.c | 15 +++++++++++++++
 vm.c     | 34 ++++++++++++++++++++++++++++++++++
 6 files changed, 59 insertions(+)
 create mode 100644 testvm.c

diff --git a/Makefile b/Makefile
index 09d790c..00c0f46 100644
--- a/Makefile
+++ b/Makefile
@@ -167,6 +167,7 @@ mkfs: mkfs.c fs.h
 
 UPROGS=\
 	_cat\
+	_testvm\
 	_echo\
 	_forktest\
 	_grep\
diff --git a/defs.h b/defs.h
index 82fb982..c7d5e30 100644
--- a/defs.h
+++ b/defs.h
@@ -185,6 +185,7 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+void vmprint(pde_t *pgdir);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/exec.c b/exec.c
index b40134f..28f088c 100644
--- a/exec.c
+++ b/exec.c
@@ -38,6 +38,9 @@ exec(char *path, char **argv)
   if((pgdir = setupkvm()) == 0)
     goto bad;
 
+  cprintf("exec - pgdir 0x%x\n", curproc->pgdir);
+   vmprint(curproc->pgdir);
+    
   // Load program into memory.
   sz = 0;
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
@@ -59,6 +62,9 @@ exec(char *path, char **argv)
   iunlockput(ip);
   end_op();
   ip = 0;
+  
+         
+
 
   // Allocate two pages at the next page boundary.
   // Make the first inaccessible.  Use the second as the user stack.
diff --git a/proc.c b/proc.c
index 806b1b1..59230ff 100644
--- a/proc.c
+++ b/proc.c
@@ -287,6 +287,8 @@ wait(void)
       if(p->state == ZOMBIE){
         // Found one.
         pid = p->pid;
+        cprintf("exit - pgdir 0x%x\n", curproc->pgdir);
+        vmprint(curproc->pgdir);
         kfree(p->kstack);
         p->kstack = 0;
         freevm(p->pgdir);
diff --git a/testvm.c b/testvm.c
new file mode 100644
index 0000000..68fdf19
--- /dev/null
+++ b/testvm.c
@@ -0,0 +1,15 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void) {
+  printf(1, "Allocating pages using sbrk\n");
+  for (int i = 0; i < 5; i++) {
+    if (sbrk(4096) == (void *)-1) {
+      printf(1, "Failed to allocate memory\n");
+      exit();
+    }
+  }
+  printf(1, "Pages allocated\n");
+  exit();
+}
diff --git a/vm.c b/vm.c
index 7134cff..67fa1d8 100644
--- a/vm.c
+++ b/vm.c
@@ -29,6 +29,40 @@ seginit(void)
   lgdt(c->gdt, sizeof(c->gdt));
 }
 
+
+
+
+
+void vmprint(pde_t *pgdir) {
+    pde_t *pde;
+    pte_t *pte;
+    uint i, j;
+
+    // Iterujemy po pierwszych 512 PDE (poniewa≈º dalej jest mapowanie kernela)
+    for(i = 0; i < 512; i++) {
+        pde = &pgdir[i];
+
+        if(*pde & PTE_P) {  
+            cprintf(".. %d: pde 0x%x pa 0x%x\n", i, pde, PTE_ADDR(*pde));
+
+            pte = (pte_t*)P2V(PTE_ADDR(*pde));  
+
+            // Iterujemy po pierwszych 1024 PTE 
+            for(j = 0; j < 1024; j++) {
+                if(pte[j] & PTE_P) {  
+                    cprintf(".. .. %d: pte 0x%x pa 0x%x\n", j, &pte[j], PTE_ADDR(pte[j]));
+                }
+            }
+        }
+    }
+}
+
+
+
+
+
+
+
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
-- 
2.25.1

